<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>00 Kubernetes架构</title>
    <url>/2024/08/31/00-Kubernetes%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="Kubernetes架构"><a href="#Kubernetes架构" class="headerlink" title="Kubernetes架构"></a>Kubernetes架构</h1><p>Kubernetes的架构，由Master和Node两种节点组成，这两种角色分别对应控制节点和计算节点。</p>
<img src="/2024/08/31/00-Kubernetes%E6%9E%B6%E6%9E%84/k8s%E6%9E%B6%E6%9E%84%E5%9B%BE.png" class="" title="k8s架构图">

<p><strong>控制节点</strong>由三个紧密协作的独立组件组合而成，分别是负责API服务的kube-apiserver，负责调度的kube-scheduler，以及负责容器编排的kube-controller-manager。整个集群的持久化数据，则由kube-apiserver处理后保存在Etcd。</p>
<p><strong>计算节点</strong>上最核心的部分，则是一个叫作 kubelet 的组件。</p>
<p>在 Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道。而这个交互所依赖的，是一个称作 CRI（Container Runtime Interface）的远程调用接口，这个接口定义了容器运行时的各项核心操作，比如：启动一个容器需要的所有参数。</p>
<p>这也是为何，Kubernetes 项目并不关心你部署的是什么容器运行时、使用的什么技术实现，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 CRI 接入到 Kubernetes 项目当中。</p>
<p>而具体的容器运行时，比如 Docker 项目，则一般通过 OCI 这个容器运行时规范同底层的 Linux 操作系统进行交互，即：把 CRI 请求翻译成对 Linux 操作系统的调用（操作 Linux Namespace 和 Cgroups 等）。</p>
<p>此外，kubelet 还通过 gRPC 协议同一个叫作 Device Plugin 的插件进行交互。这个插件，是 Kubernetes 项目用来管理 GPU 等宿主机物理设备的主要组件，也是基于 Kubernetes 项目进行机器学习训练、高性能作业支持等工作必须关注的功能。</p>
<p>而kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。这两个插件与 kubelet 进行交互的接口，分别是 CNI（Container Networking Interface）和 CSI（Container Storage Interface）。</p>
<h1 id="核心功能全景图"><a href="#核心功能全景图" class="headerlink" title="核心功能全景图"></a>核心功能全景图</h1><img src="/2024/08/31/00-Kubernetes%E6%9E%B6%E6%9E%84/%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E5%85%A8%E6%99%AF%E5%9B%BE.png" class="" title="核心功能全景图">

<p>Kubernetes 项目最主要的设计思想是，<strong>从更宏观的角度，以统一的方式来定义任务之间的各种关系，并且为将来支持更多种类的关系留有余地</strong>。</p>
<p>按照这幅图的线索，我们从容器这个最基础的概念出发，首先遇到了容器间“紧密协作”关系的难题，于是就扩展到了 Pod；有了 Pod 之后，我们希望能一次启动多个应用的实例，这样就需要 Deployment 这个 Pod 的多实例管理器；而有了这样一组相同的 Pod 后，我们又需要通过一个固定的 IP 地址和端口以负载均衡的方式访问它，于是就有了 Service。</p>
<p>可是，如果现在两个不同 Pod 之间不仅有“访问关系”，还要求在发起时加上授权信息。最典型的例子就是 Web 应用对数据库访问时需要 Credential（数据库的用户名和密码）信息。那么，在 Kubernetes 中这样的关系又如何处理呢？</p>
<p>Kubernetes 项目提供了一种叫作 Secret 的对象，它其实是一个保存在 Etcd 里的键值对数据。这样，你把 Credential 信息以 Secret 的方式存在 Etcd 里，Kubernetes 就会在你指定的 Pod（比如，Web 应用的 Pod）启动时，自动把 Secret 里的数据以 Volume 的方式挂载到容器里。这样，这个 Web 应用就可以访问数据库了。</p>
<p>除了应用与应用之间的关系外，应用运行的形态是影响“如何容器化这个应用”的第二个重要因素。</p>
<p>为此，Kubernetes 定义了新的、基于 Pod 改进后的对象。比如 Job，用来描述一次性运行的 Pod（比如，大数据任务）；再比如 DaemonSet，用来描述每个宿主机上必须且只能运行一个副本的守护进程服务；又比如 CronJob，则用于描述定时任务等等。</p>
<p>如此种种，正是 Kubernetes 项目定义容器间关系和形态的主要方法。</p>
<p>可以看到，Kubernetes 项目并没有像其他项目那样，为每一个管理功能创建一个指令，然后在项目中实现其中的逻辑。这种做法，的确可以解决当前的问题，但是在更多的问题来临之后，往往会力不从心。</p>
<p>相比之下，在 Kubernetes 项目中，我们所推崇的使用方法是：</p>
<p>首先，通过一个“编排对象”，比如 Pod、Job、CronJob 等，来描述你试图管理的应用；<br>然后，再为它定义一些“服务对象”，比如 Service、Secret、Horizontal Pod Autoscaler（自动水平扩展器）等。这些对象，会负责具体的平台级功能。<br>这种使用方法，就是所谓的“声明式 API”。这种 API 对应的“编排对象”和“服务对象”，都是 Kubernetes 项目中的 API 对象（API Object）。</p>
]]></content>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>01 从0到1搭建Kubernetes集群</title>
    <url>/2024/08/31/01-%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BAKubernetes%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备"></a>1 环境准备</h1><h2 id="1-1-服务器配置"><a href="#1-1-服务器配置" class="headerlink" title="1.1 服务器配置"></a>1.1 服务器配置</h2><ul>
<li>每台机器 2 GB 或更多的 RAM（如果少于这个数字将会影响应用的运行内存）</li>
<li>CPU 2 核心及以上</li>
<li>集群中的所有机器的网络彼此均能相互连接（公网和内网都可以）</li>
<li>节点之中不可以有重复的主机名、MAC 地址（可以使用ip link或者ifconfig -a查看）或 product_uuid（可以使用sudo cat &#x2F;sys&#x2F;class&#x2F;dmi&#x2F;id&#x2F;product_uuid校验）</li>
</ul>
<table>
<thead>
<tr>
<th>主机名</th>
<th>ip</th>
</tr>
</thead>
<tbody><tr>
<td>node01（master）</td>
<td>192.168.180.100</td>
</tr>
<tr>
<td>node02（worker）</td>
<td>192.168.180.110</td>
</tr>
<tr>
<td>node03（worker）</td>
<td>192.168.180.120</td>
</tr>
</tbody></table>
<h2 id="1-2-环境配置"><a href="#1-2-环境配置" class="headerlink" title="1.2 环境配置"></a>1.2 环境配置</h2><p><strong>注意：如果没有特别说明，下面的指令都需要在三个节点上执行</strong></p>
<h3 id="1-2-1-关闭防火墙"><a href="#1-2-1-关闭防火墙" class="headerlink" title="1.2.1 关闭防火墙"></a>1.2.1 关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld &amp;&amp; systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-禁用selinux"><a href="#1-2-2-禁用selinux" class="headerlink" title="1.2.2 禁用selinux"></a>1.2.2 禁用selinux</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span><br><span class="line">sudo setenforce 0</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>

<p>通过运行命令 setenforce 0 和 sed … 将 SELinux 设置为 permissive 模式相当于将其禁用。 这是允许容器访问主机文件系统所必需的，例如，某些容器网络插件需要这一能力。 必须这么做，直到 kubelet 改进其对 SELinux 的支持。</p>
<h3 id="1-2-3-关闭交换分区"><a href="#1-2-3-关闭交换分区" class="headerlink" title="1.2.3 关闭交换分区"></a>1.2.3 关闭交换分区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暂时禁用交换分区</span></span><br><span class="line">sudo swapoff -a</span><br><span class="line"><span class="comment"># 配置重启后仍然禁用分区</span></span><br><span class="line">sed -i <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class="line"><span class="comment"># 检查Swap</span></span><br><span class="line">free m</span><br><span class="line"></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        4154356      126272     3871248       11916      156836     3808364</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure>

<h1 id="2-安装docker和containerd"><a href="#2-安装docker和containerd" class="headerlink" title="2 安装docker和containerd"></a>2 安装docker和containerd</h1><p>配置国内软件源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h2 id="2-1-安装docker"><a href="#2-1-安装docker" class="headerlink" title="2.1 安装docker"></a>2.1 安装docker</h2><p>配置docker仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/docker-ce.repo </span><br><span class="line"></span><br><span class="line">[docker-ce-stable]</span><br><span class="line">name=Docker CE Stable - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/stable</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"> </span><br><span class="line">[docker-ce-stable-debuginfo]</span><br><span class="line">name=Docker CE Stable - Debuginfo <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="variable">$releasever</span>/debug-<span class="variable">$basearch</span>/stable</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"> </span><br><span class="line">[docker-ce-stable-source]</span><br><span class="line">name=Docker CE Stable - Sources</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="variable">$releasever</span>/source/stable</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"> </span><br><span class="line">[docker-ce-test]</span><br><span class="line">name=Docker CE Test - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/test</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"> </span><br><span class="line">[docker-ce-test-debuginfo]</span><br><span class="line">name=Docker CE Test - Debuginfo <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="variable">$releasever</span>/debug-<span class="variable">$basearch</span>/test</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"> </span><br><span class="line">[docker-ce-test-source]</span><br><span class="line">name=Docker CE Test - Sources</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="variable">$releasever</span>/source/test</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"> </span><br><span class="line">[docker-ce-nightly]</span><br><span class="line">name=Docker CE Nightly - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/nightly</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"> </span><br><span class="line">[docker-ce-nightly-debuginfo]</span><br><span class="line">name=Docker CE Nightly - Debuginfo <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="variable">$releasever</span>/debug-<span class="variable">$basearch</span>/nightly</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"> </span><br><span class="line">[docker-ce-nightly-source]</span><br><span class="line">name=Docker CE Nightly - Sources</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="variable">$releasever</span>/source/nightly</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br></pre></td></tr></table></figure>

<p>安装docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<p>配置镜像加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://8740sp47.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="2-2-安装containerd"><a href="#2-2-安装containerd" class="headerlink" title="2.2 安装containerd"></a>2.2 安装containerd</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y containerd</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/containerd</span><br><span class="line">containerd config default | sudo <span class="built_in">tee</span> /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>

<p>修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改或者添加这个选项</span></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class="line">  SystemdCgroup = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 修改此处替换成阿里云的源</span></span><br><span class="line">sandbox_image = <span class="string">&quot;registry.aliyuncs.com/google_containers/pause:3.7&quot;</span></span><br></pre></td></tr></table></figure>

<p>重启containerd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart containerd</span><br><span class="line">systemctl <span class="built_in">enable</span> containerd</span><br></pre></td></tr></table></figure>



<h1 id="3-安装kubeadm"><a href="#3-安装kubeadm" class="headerlink" title="3 安装kubeadm"></a>3 安装kubeadm</h1><h2 id="3-1-配置Kubernetes的yum仓库"><a href="#3-1-配置Kubernetes的yum仓库" class="headerlink" title="3.1 配置Kubernetes的yum仓库"></a>3.1 配置Kubernetes的yum仓库</h2><p>在仓库定义中的 exclude 参数确保了与 Kubernetes 相关的软件包在运行 yum update 时不会升级，因为升级 Kubernetes 需要遵循特定的过程。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此操作会覆盖 /etc/yum.repos.d/kubernetes.repo 中现存的所有配置</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/rpm/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/rpm/repodata/repomd.xml.key</span></span><br><span class="line"><span class="string">exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-安装kubelet、kubeadm-和-kubectl"><a href="#3-2-安装kubelet、kubeadm-和-kubectl" class="headerlink" title="3.2 安装kubelet、kubeadm 和 kubectl"></a>3.2 安装kubelet、kubeadm 和 kubectl</h2><p>安装 kubelet、kubeadm 和 kubectl，并启用 kubelet 以确保它在启动时自动启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>

<h1 id="4-创建Kubernetes集群"><a href="#4-创建Kubernetes集群" class="headerlink" title="4 创建Kubernetes集群"></a>4 创建Kubernetes集群</h1><h2 id="4-1-部署master节点"><a href="#4-1-部署master节点" class="headerlink" title="4.1 部署master节点"></a>4.1 部署master节点</h2><h3 id="4-1-1-kubeadm-init（只在主节点执行）"><a href="#4-1-1-kubeadm-init（只在主节点执行）" class="headerlink" title="4.1.1 kubeadm init（只在主节点执行）"></a>4.1.1 kubeadm init（只在主节点执行）</h3><p><strong>只在主节点执行</strong>，将下面的地址（192.168.180.100）修改为自己的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address 192.168.180.100 --image-repository registry.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装成功会看到如下信息</span></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.180.100:6443 --token 94ebi2.87y0jv2lg3soyymo \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:43aaea84c144c6d5ace987e932274ed510ed58f7394f187ce4797679276726eb</span><br></pre></td></tr></table></figure>

<p>继续执行下面的脚本，需要这些配置命令的原因是：Kubernetes 集群默认需要加密方式访问。所以，这几条命令，就是将刚刚部署生成的 Kubernetes 集群的安全配置文件，保存到当前用户的.kube 目录下，kubectl 默认会使用这个目录下的授权信息访问 Kubernetes 集群。如果不这么做的话，我们每次都需要通过 export KUBECONFIG 环境变量告诉 kubectl 这个安全配置文件的位置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure>

<h3 id="4-1-2-部署网络插件Flannel"><a href="#4-1-2-部署网络插件Flannel" class="headerlink" title="4.1.2 部署网络插件Flannel"></a>4.1.2 部署网络插件Flannel</h3><h4 id="4-1-2-1-加载Flannel镜像（三个节点都要执行）"><a href="#4-1-2-1-加载Flannel镜像（三个节点都要执行）" class="headerlink" title="4.1.2.1 加载Flannel镜像（三个节点都要执行）"></a>4.1.2.1 加载Flannel镜像（三个节点都要执行）</h4><p>通过kubectl检查节点上的系统pod的状态，我们可以看到coredns的状态是Pending，这是符合预期的，因为当前节点的网络尚未就绪，所以为了集群正常使用，需要部署网络插件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pods -n kube-system</span><br><span class="line"></span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-7b5944fdcf-6d4kr         0/1     Pending   0          13m</span><br><span class="line">coredns-7b5944fdcf-nbzth         0/1     Pending   0          13m</span><br><span class="line">etcd-node01                      1/1     Running   0          14m</span><br><span class="line">kube-apiserver-node01            1/1     Running   0          14m</span><br><span class="line">kube-controller-manager-node01   1/1     Running   0          14m</span><br><span class="line">kube-proxy-rmtm7                 1/1     Running   0          13m</span><br><span class="line">kube-scheduler-node01            1/1     Running   0          14m</span><br></pre></td></tr></table></figure>

<p>这里我们使用flannel，因为需要梯子，这里直接提供下载，解压安装包然后执行下面的指令即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1eK0-K_plLJTKsA7f58FYFg </span><br><span class="line">提取码：0hms</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载压缩包后解压</span></span><br><span class="line">unzip 安装k8s所需flannel必要镜像包.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在解压后的目录执行</span></span><br><span class="line">ctr -n k8s.io i import flannel-cni-plugin-v1.1.2.tar</span><br><span class="line">ctr -n k8s.io i import flannel.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">crictl images | grep flannel</span><br><span class="line"></span><br><span class="line">docker.io/flannel/flannel-cni-plugin                              v1.1.2              7a2dcab94698c       8.25MB</span><br><span class="line">docker.io/flannel/flannel                                         v0.21.5             a6c0cb5dbd211       69.9MB</span><br></pre></td></tr></table></figure>

<h4 id="4-1-2-2-部署Flannel插件"><a href="#4-1-2-2-部署Flannel插件" class="headerlink" title="4.1.2.2 部署Flannel插件"></a>4.1.2.2 部署Flannel插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">kubectl apply -f kube-flannel.yaml</span><br></pre></td></tr></table></figure>

<p>至此可以看到master节点已经就绪</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME     STATUS   ROLES           AGE     VERSION</span><br><span class="line">node01   Ready    control-plane   3h17m   v1.30.4</span><br></pre></td></tr></table></figure>

<h2 id="4-2-部署worker节点"><a href="#4-2-部署worker节点" class="headerlink" title="4.2 部署worker节点"></a>4.2 部署worker节点</h2><p>安装好Flannel后，加入集群，在两个工作节点执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.180.100:6443 --token 94ebi2.87y0jv2lg3soyymo \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:43aaea84c144c6d5ace987e932274ed510ed58f7394f187ce4797679276726eb</span><br></pre></td></tr></table></figure>

<p>如果加入集群的命令找不到了可以在master节点重新生成一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>

<h1 id="5-部署完成"><a href="#5-部署完成" class="headerlink" title="5 部署完成"></a>5 部署完成</h1><p>至此，Kubernetes集群已经部署完毕，可以检查集群状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看节点状态</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME     STATUS   ROLES           AGE     VERSION</span><br><span class="line">node01   Ready    control-plane   4h9m    v1.30.4</span><br><span class="line">node02   Ready    &lt;none&gt;          10m     v1.30.4</span><br><span class="line">node03   Ready    &lt;none&gt;          7m54s   v1.30.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pods状态</span></span><br><span class="line">kubectl get pods -A</span><br><span class="line"></span><br><span class="line">NAMESPACE      NAME                             READY   STATUS    RESTARTS        AGE</span><br><span class="line">kube-flannel   kube-flannel-ds-5d9ws            1/1     Running   2 (7m59s ago)   8m30s</span><br><span class="line">kube-flannel   kube-flannel-ds-6lppl            1/1     Running   0               66m</span><br><span class="line">kube-flannel   kube-flannel-ds-pbpzn            1/1     Running   2 (10m ago)     11m</span><br><span class="line">kube-system    coredns-7b5944fdcf-6d4kr         1/1     Running   0               4h9m</span><br><span class="line">kube-system    coredns-7b5944fdcf-nbzth         1/1     Running   0               4h9m</span><br><span class="line">kube-system    etcd-node01                      1/1     Running   0               4h9m</span><br><span class="line">kube-system    kube-apiserver-node01            1/1     Running   0               4h9m</span><br><span class="line">kube-system    kube-controller-manager-node01   1/1     Running   0               4h9m</span><br><span class="line">kube-system    kube-proxy-lxvnl                 1/1     Running   0               11m</span><br><span class="line">kube-system    kube-proxy-rmtm7                 1/1     Running   0               4h9m</span><br><span class="line">kube-system    kube-proxy-vd424                 1/1     Running   0               8m30s</span><br><span class="line">kube-system    kube-scheduler-node01            1/1     Running   0               4h9m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">kubectl get cs</span><br><span class="line"></span><br><span class="line">NAME                 STATUS    MESSAGE   ERROR</span><br><span class="line">controller-manager   Healthy   ok        </span><br><span class="line">scheduler            Healthy   ok        </span><br><span class="line">etcd-0               Healthy   ok  </span><br></pre></td></tr></table></figure>



<h1 id="6-文档参考"><a href="#6-文档参考" class="headerlink" title="6 文档参考"></a>6 文档参考</h1><blockquote>
<p>文档参考</p>
<p><a href="https://v1-30.docs.kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">https://v1-30.docs.kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a><br><a href="https://blog.csdn.net/m0_67019144/article/details/138046111">https://blog.csdn.net/m0_67019144/article/details/138046111</a><br><a href="https://blog.csdn.net/qinxue722/article/details/140914287">https://blog.csdn.net/qinxue722/article/details/140914287</a></p>
<p><a href="https://kingdom.blog.csdn.net/article/details/140135764">https://kingdom.blog.csdn.net/article/details/140135764</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
</search>
